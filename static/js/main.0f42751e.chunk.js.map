{"version":3,"sources":["views/Error/Error.jsx","components/Footer/Footer.jsx","components/Header/Header.jsx","components/ViewContainer/ViewContainer.jsx","views/Homepage/Homepage.jsx","config/Router.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Error","fluid","className","top","src","alt","window","location","href","to","theme","onClick","history","back","Footer","Date","getFullYear","Header","ViewContainer","props","children","Homepage","Router","exact","path","component","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kRA0BeA,MArBf,WACE,OAAO,kBAAC,IAAD,CAAWC,OAAK,GACrB,kBAAC,IAAD,CAAMC,UAAU,cACd,kBAAC,IAAD,CAASA,UAAU,iBAAiBC,KAAG,EAACC,IAAI,8CAA8CC,IAAI,YAE9F,kBAAC,IAAD,KACE,kBAAC,IAAD,wBACA,yDAA+BC,OAAOC,SAASC,KAA/C,KAEA,yBAAKN,UAAU,iBACb,kBAAC,IAAD,CAAMO,GAAG,KACP,kBAAC,IAAD,cAGF,kBAAC,IAAD,CAAQC,MAAM,QAAQC,QAAS,kBAAML,OAAOM,QAAQC,SAApD,gB,OCVKC,MANf,WACE,OAAO,4BAAQZ,UAAU,eAAlB,mBACa,IAAIa,MAAOC,cADxB,gCCEMC,MAJf,WACE,OAAO,yBAAKf,UAAU,uBAAf,W,OCuBMgB,MAff,SAAuBC,GACrB,OAAO,yBAAKjB,UAAU,kBACpB,6BACE,kBAAC,EAAD,MACCiB,EAAMC,UAGT,kBAAC,EAAD,QCXWC,MAJf,WACE,OAAO,kBAAC,EAAD,qBCWMC,MAVf,WACE,OAAO,kBAAC,IAAD,KACL,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWJ,IAEjC,kBAAC,IAAD,CAAOG,KAAK,KAAKC,UAAWzB,OCHnB0B,MAJf,WACE,OAAO,kBAAC,EAAD,OCQWC,QACW,cAA7BrB,OAAOC,SAASqB,UAEe,UAA7BtB,OAAOC,SAASqB,UAEhBtB,OAAOC,SAASqB,SAASC,MACvB,2D,OCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.0f42751e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Error.scss';\r\nimport { Container, Card, CardBody, CardTitle, Button, CardImg } from 'shards-react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Error() {\r\n  return <Container fluid>\r\n    <Card className=\"error-card\">\r\n      <CardImg className=\"error-card-img\" top src=\"assets/img/raychan-PY3d9NScUP4-unsplash.jpg\" alt=\"Sad cat\" />\r\n\r\n      <CardBody>\r\n        <CardTitle>Page not found </CardTitle>\r\n        <p>Could not find anything at {window.location.href}.</p>\r\n\r\n        <div className=\"btn-container\">\r\n          <Link to=\"/\">\r\n            <Button>Home</Button>\r\n          </Link>\r\n\r\n          <Button theme=\"light\" onClick={() => window.history.back()}>Go back</Button>\r\n        </div>\r\n      </CardBody>\r\n    </Card>\r\n  </Container>;\r\n}\r\n\r\nexport default Error;\r\n","import React from 'react';\nimport './Footer.scss';\n\nfunction Footer() {\n  return <footer className=\"site-footer\">\n    Copyright &copy; {new Date().getFullYear()} by SÅ‚awomir Chabowski\n  </footer>;\n}\n\nexport default Footer;\n","import React from 'react';\n\nfunction Header() {\n  return <div className=\"bg-white shadow p-3\">Header</div>;\n}\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Footer from '../Footer/Footer';\nimport Header from '../Header/Header';\nimport './ViewContainer.scss';\n\n/**\n * @typedef {object} ViewContainerProps\n * @property {ReactNodeLike[]} children\n * @param {object} props \n */\nfunction ViewContainer(props) {\n  return <div className=\"site-container\">\n    <div>\n      <Header />\n      {props.children}\n    </div>\n\n    <Footer />\n  </div>;\n}\n\nViewContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default ViewContainer;\n","import React from 'react';\r\nimport ViewContainer from '../../components/ViewContainer/ViewContainer';\r\n\r\nfunction Homepage() {\r\n  return <ViewContainer>Hello world</ViewContainer>;\r\n}\r\n\r\nexport default Homepage;\r\n","import { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport Error from '../views/Error/Error';\r\nimport Homepage from '../views/Homepage/Homepage';\r\nimport React from 'react';\r\n\r\nfunction Router() {\r\n  return <BrowserRouter>\r\n    <Switch>\r\n      <Route exact path=\"/\" component={Homepage} />\r\n\r\n      <Route path=\"**\" component={Error} />\r\n    </Switch>\r\n  </BrowserRouter>\r\n};\r\n\r\nexport default Router;\r\n","import React from 'react';\nimport Router from './config/Router';\n\nfunction App() {\n  return <Router />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './assets/css/global.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}